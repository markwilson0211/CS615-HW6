#!/usr/bin/env python

import sys, getopt, os, json
import subprocess
import threading
import signal
import time

#Manual Page
def help_page():
            print "AFEWMORE(1)       BSD General Commands Manual          AFEWMORE(1)\n\
    \n\
    NAME\n\
         afewmore -- duplicate EC2 instances with their data directory\
    \n\
    SYNOPSIS\n\
         afewmore [-hv] [-d dir] [-n num] instance\n\
    \n\
    DESCRIPTION\n\
         The afewmore tool can be used to duplicate a given EC2 instance.  When\n\
         doing so, it creates multiple new instances and populates their data\n\
         directory by copying the data from the original.\n\
    \n\
    OPTIONS\n\
         The source instance is specified via the mandatory argument to afewmore.\n\
         In addition, the following command-line options are supported:\n\
    \n\
         -d dir   Copy the contents of this data directory from the orignal source\n\
              instance to all the new instances.  If not specified, defaults\n\
              to /data.\n\
    \n\
         -h       Print a usage statement and exit.\n\
    \n\
         -n num   Create this many new instances.  If not specified, defaults to\n\
              10.\n\
    \n\
         -v       Be verbose.\n\
    \n\
    DETAILS\n\
         Frequently, it is necessary to duplicate a given server's configuration\n\
         or setup.  While configuration management and service orchestration sys-\n\
         tems may be able to perform this task, the afewmore tool allows for a\n\
         trivial initial bootstrapping that only concerns itself with data dupli-\n\
         cation, not host configuration.\n\
    \n\
         Upon invocation, afewmore will identify the type of EC2 instance in ques-\n\
         tion and launch the requested number of duplicates.  It will then copy\n\
         the contents of the given directory from the source instance to all of\n\
         the newly created instances.\n\
    \n\
    OUTPUT\n\
         By default, afewmore prints the instance IDs of the newly created EC2\n\
         instances as the only output.  Unless an error occurs, no other output is\n\
         generated.\n\
    \n\
         If the -v flag is given, afewmore may print meaningful diagnostic mes-\n\
         sages as it progresses to stdout.\n\
    \n\
         Any errors encountered cause a meaningful error message to be printed to\n\
         STDERR.\n\
    \n\
    ENVIRONMENT\n\
         The afewmore tool is suitable to be used by any user and does not have\n\
         any user-specific settings or credentials hard coded.\n\
    \n\
         afewmore assumes that the user has set up their environment for general\n\
         use with the EC2 tools.  That is, it will not set or modify any environ-\n\
         ment variables.\n\
    \n\
         afewmore also assumes that the user has set up their ~/.ssh/config file\n\
         to access instances in EC2 via ssh(1) without any additional settings.\n\
    \n\
    EXIT STATUS\n\
         The afewmore will exit with a return status of 0 under normal circum-\n\
         stances.  If an error occurred, afewmore will exit with a value >0.\n\
    \n\
    EXAMPLES\n\
         The following examples illustrate common usage of this tool.\n\
    \n\
         To create ten more instances of the EC2 instance i-0a1b2c3d4f and copy\n\
         the contents of the '/data' directory from that instance:\n\
    \n\
           $ afewmore i-0a1b2c3d4f\n\
           i-0a1b2c3d4f\n\
           i-1a1b2c3d4f\n\
           i-2a1b2c3d4f\n\
           i-3a1b2c3d4f\n\
           i-4a1b2c3d4f\n\
           i-5a1b2c3d4f\n\
           i-6a1b2c3d4f\n\
           i-7a1b2c3d4f\n\
           i-8a1b2c3d4f\n\
           i-9a1b2c3d4f\n\
           $ echo $?\n\
           0\n\
           $\n\
    \n\
         To create just one more instance and copy the contents of the directory\n\
         '/usr/local/share':\n\
    \n\
           $ afewmore -n 1 i-0a1b2c3d4f\n\
           i-1a1b2c3d4f\n\
           $\n\
    \n\
    SEE ALSO\n\
         aws help, ssh(1), tar(1), rsync(1)\n\
    \n\
    HISTORY\n\
         afewmore was originally assigned by Jan Schaumann\n\
         <jschauma@cs.stevens.edu> as a homework assignment for the class 'Aspects\n\
         of System Administration' at Stevens Institute of Technology in the\n\
         Spring of 2017.\n\
    \n\
    BSD             March 27, 2017                 BSD"



#error record, in this program, just print error information
def elog(line):
	sys.stderr.write(line + "\n")
	sys.exit(1)


#processing message
def log(line):
     if False:
         print "DEBUG: " + str(round(float(time.time() - START_TIME), 3)) + "s - " + str(line)


# Security Groups
class SecurityGroup:
	def __init__(self, sg):
		self.gname=sg["GroupName"]
		self.gid=sg["GroupId"]
	def __str__(self):
		return "\tGroupName: {0}\n\tGroupID: {1}".format(self.gname, self.gid)

# Finish certain script command from system,
def execute(cmd, timeout=None):
    try:
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, preexec_fn=os.setsid)
        output, error = proc.communicate()
        if timeout is not None:
            time.sleep(timeout)
            log("kill command: \n\t{0}".format(cmd))
            os.killprog(proc.pid, signal.SIGTERM)
            return (output, error)
        if output:
           return (output, None)
        if error:
           log("There was an error executing the command: \n\t{0}".format(cmd))
           return (None, error)
        return ("", None)
    except OSError, oserror:
        return (None, oserror)

#Store information of a exist instance
class Instance:
	def __init__(self, instanceID):
		out, err = execute("aws ec2 describe-instances --instance-id {0} --output json".format(instanceID))
		if out:
			instance = json.loads(out)["Reservations"][0]["Instances"][0]
			self.inId = instanceID
			self.azone = instance["Placement"]["AvailabilityZone"]
			self.key = instance["KeyName"]
			self.Imgid = instance["ImageId"]
			self.InType = instance["InstanceType"]
			self.Ip = instance["PublicIpAddress"]
			self.dns = instance["PublicDnsName"]
			self.uname = "ubuntu"
			self.mkp = "~/.ssh/my-key-pair.pem"
			self.secgroup = []
			for group in instance["SecurityGroups"]:
				self.secgroup.append(SecurityGroup(group))
		else:
			elog(err) 
	def __str__(self):
		res="\tinstanceID:{0} \n\tAvailabilityZone: {1}\n\tKeyName: {2}\n\tImageId: {3}\n\tInsatnceType: {4}\n\tPublicIP: {5}".format(self.inID, self.azone, self.key, self.Imgid, self.InType, self.Ip)
		for i, group in enumerate(self.secgroup):
			res += "\n\tSG #" + str(i)
			res += str(group)
			return res

# Start a new instance, if no error, return new instance id
def ec2_run_instance(image_id, insType, group, key):
	gs=""
	for g in group:
		gs+=g.gname
		gs+=" "
	resp=subprocess.Popen([	"aws ec2 run-instances --image-id "+image_id+ \
							" --security-groups "+gs+ \
							" --instance-type "+insType+ \
							" --key-name "+key+ \
							" --query 'Instances[0].InstanceId'"], \
							stdout=subprocess.PIPE, \
							stderr=subprocess.PIPE, \
							shell=True)
	temp=resp.stdout.readlines()
	if temp==[]:
		error=resp.stderr.readlines()
		print error
		return 2
	else:
		instance_id=temp[0].strip('\"\n')
		resp.stdout.close()
		resp.wait()
		return instance_id

# terminate a certain instance
def ec2_terminate_instance(instance_id):
	os.system("aws ec2 terminate-instances --instance-id "+instance_id)

# Give instance id, and you will get the ip address
def ec2_instance_public_ip(instance_id):
	resp=subprocess.Popen([	"aws ec2 describe-instances --instance-id "+instance_id+ \
							" --query \'Reservations[0].Instances[0].PublicIpAddress\'"], \
							stdout=subprocess.PIPE, \
							stderr=subprocess.PIPE, \
							shell=True)
	temp=resp.stdout.readlines()
	if temp==[]:
		error=resp.stderr.readlines()
		elog(err)
		return 2
	else:
		dns=temp[0].strip('\"\n')
		resp.stdout.close()
		resp.wait()
		return dns

# Give instance id, and you will get the ip address
def ec2_instance_public_dns(instance_id):
	
	resp=subprocess.Popen( ["aws ec2 describe-instances --instance-id "+instance_id+ \
							" --query \'Reservations[0].Instances[0].PublicDnsName\'"], \
							stdout=subprocess.PIPE, \
							stderr=subprocess.PIPE, \
							shell=True)
	temp=resp.stdout.readlines()
	if temp==[]:
		error=ssh.stderr.readlines()
		print error
		return 2
	else:
		id=temp[0].strip('\"\n')
		resp.stdout.close()
		resp.wait()
		return id

# use tar command to compress target directory, 
def tar_directory(instance_dns, directory, user):
	def fun():
#		print "Start compress:\n"
	#let progress sleep 30 seconds, this is just make sure we could access instance when aws server just finish run-instance
        	t=threading.Timer(30, fun())

	ssh=subprocess.Popen([	"ssh -o \"StrictHostKeyChecking no\" "+user+"@"+instance_dns], \
								stdin=subprocess.PIPE, \
								stderr=subprocess.PIPE, \
								shell=True)
	if user=="root":
		ssh.stdin.write("tar -zcvf /afewmore_615.tar.gz "+directory)
	else:
		ssh.stdin.write("sudo tar -zcvf /afewmore_615.tar.gz "+directory)
	ssh.stdin.close()
	ssh.wait()
	return '/afewmore_615.tar.gz'

# Use tar command to uncompress .tar.gz, this function will be use in target instance
def retar_directory(instance_dns, directory,user):
	ssh=subprocess.Popen([	"ssh -o \"StrictHostKeyChecking no\" "+user+"@"+instance_dns], \
								stdin=subprocess.PIPE, \
								stderr=subprocess.PIPE, \
								shell=True)
	if user=="root":
		ssh.stdin.write("tar zxvf ~/afewmore_615.tar.gz -C "+directory)
	else:
		ssh.stdin.write("sudo tar -zxvf ~/afewmore_615.tar.gz -C "+directory)
	ssh.stdin.close()
	ssh.wait()

# If we copy /home from original instance, we obviously can not compress it at /home, because we may get /home/home.
#So we need correct target uncompress path.
def target_dir(directory, source):
	tarDirectory=directory
	end=directory.rfind('/')
	if end!=0:
		if(end==len(tarDirectory)-1):
			tarDirectory=directory[0:end]
			end=tarDirectory.rfind('/')
			if end == 0:
				end=1
	else:
		end=1
	tarDirectory=directory[0:end]

	out, err=execute("ssh -o \"StrictHostKeyChecking no\" "+source.uname+"@"+source.dns+" ls "+tarDirectory)
	if err:
		elog('Directory not exist')
	else:
		return tarDirectory


#Use scp -3 to transfer .tar.gz file
def ssh_transfer(source, target_dns, source_directory, target_directory):
#	print "Start ssh, it may take a little bit long time\n"
	time.sleep(100)
	resp=subprocess.Popen([	"scp -3 -o \"StrictHostKeyChecking no\" "+ \
							source.uname+"@"+source.dns+":/afewmore_615.tar.gz "+\
							source.uname+"@"+target_dns+":~/afewmore_615.tar.gz"],
							stdout=subprocess.PIPE, \
							stderr=subprocess.PIPE, \
							shell=True)
	resp.stdout.close()
	resp.wait()

# This function will combine may functions above, read original instance, and create new instance.
def duplicate_tar(n, source_directory, target_directory, source):
#	print "source instance is compressing target directory, please wait\n"
	file_name=tar_directory(source.dns, source_directory, source.uname)
	duplicate_id=[]
	duplicate_ip=[]
	duplicate_dns=[]
	n=int(n)
	for i in range(0,n):
		duplicate_id.append(ec2_run_instance(source.Imgid, source.InType, source.secgroup, source.key))
#		print "Create target instance\n"
		duplicate_ip.append(	ec2_instance_public_ip(duplicate_id[i])	)
		duplicate_dns.append(	ec2_instance_public_dns(duplicate_id[i]))
#		print "Got tartget instance ip and dns\n"
		ssh_transfer(source,duplicate_dns[i], source_directory, target_directory)
		retar_directory(duplicate_dns[i], target_directory, source.uname)
#		print ("transfer finish: "+str(i+1)+" / %s \n" % n )
#	print "duplicate finish\n"
	return duplicate_id

# Make sure source instance is running. If not start it
def check_instance_status(instance_id):
	out, err = execute("aws ec2 describe-instance-status --instance-id {0} --output json".format(instance_id))
	if out:
		status = json.loads(out)["InstanceStatuses"]
		if status==[]:
			out, err = execute("aws ec2 start-instances --instance-id {0}".format(instance_id))
#		print "Origin instance is working!\n"	
	else:
		elog(err)

# Get the correct user name of an instance. Four candidate user names are the usual aws ec2 instance names
# The way to look up user name, is use each candidate user name to access instance. Catch information and indentify wich does it work.
def get_user_name(instance_dns):
	default_name=['root','ec2-user', 'ubuntu', 'fedora']
	for name in default_name:	
		out, err=execute("ssh -o \"StrictHostKeyChecking no\" "+name+"@"+instance_dns+" \'whoami\'")
		if out:
			out=out.strip('\"\n')
			if out==name:
				return name
	elog('Access User Unknown')
	return 'error'
	

#root function of this script
def main():
	#Catch the user input, and anaylse it
	instance=''
	directory='/data'
	n=10;
	functionH=False
	functionV=False
	try:
		opts, args=getopt.getopt(sys.argv[1:], "hvd:n:", ["help"])
	except getopt.GetoptError:
		print 'afewmore [-hv] [-d dir] [-n num] instance'
		sys.exit(2)
	num_args=len(args)
	if(num_args<1):
		help_page()
		return False
	instance=args[-0]
	num_args-=1
	for opt, arg in opts:
		if opt =='-h':
			functionH=True
			help_page()
			sys.exit(0)
		elif opt=='-v':
			functionV=True
		elif opt=='-n':
			if arg.isdigit():
				n=arg
				num_args-=1			
			else:
				help_page()
				sys.exit(0)
		elif opt=='-d':
			directory=arg
			num_args-=1

	if num_args>0:
		help_page()
		sys.exit(0)
	#use the analysis result to copy directory
	check_instance_status(instance)
	source=Instance(instance)
	source.uname=get_user_name(source.dns)
	tarDirectory=target_dir(directory, source)
	target=duplicate_tar(n, directory, tarDirectory, source)
	print target

	


if __name__ == '__main__':
	main()
